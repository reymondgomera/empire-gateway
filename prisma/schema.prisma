generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model MasterUser {
  id           Int       @id(map: "PK_MasterUser") @unique @default(autoincrement())
  userName     String    @unique @db.NVarChar(100)
  password     String    @db.NVarChar(100)
  email        String?   @unique @db.NVarChar(100)
  firstName    String    @db.NVarChar(100)
  lastName     String    @db.NVarChar(100)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  deletedAt    DateTime?
  refreshToken String?   @db.NVarChar(100)

  @@map("MasterUser")
}

model PortalUser {
  id        String   @unique @db.NVarChar(50)
  name      String?
  username  String?
  password  String?
  email     String?
  createdAt DateTime @db.DateTime
  updatedAt DateTime @db.DateTime

  @@map("PortalUser")
}

model Organization {
  id                 String     @unique @db.NVarChar(50)
  code               String     @unique @db.NVarChar(30)
  name               String     @db.NVarChar(50)
  userId             String     @db.NVarChar(50)
  isActive           Boolean
  isDefault          Boolean
  createdAt          DateTime   @db.DateTime
  updatedAt          DateTime   @db.DateTime
  bgOrganizationCode String     @unique @default("")
  business           Business[] @relation("OrganizationToBusiness")

  @@map("Organization")
}

model Business {
  id                String              @unique @db.NVarChar(50)
  code              String              @unique @db.NVarChar(30)
  name              String              @db.NVarChar(50)
  isActive          Boolean
  isDefault         Boolean
  status            String              @db.NVarChar(10)
  organizationId    String              @db.NVarChar(50)
  createdAt         DateTime            @db.DateTime
  updatedAt         DateTime            @db.DateTime
  bgBusinessCode    String              @unique @default("") @db.NVarChar(30)
  apiKey            String?             @db.NVarChar(Max)
  organization      Organization        @relation("OrganizationToBusiness", fields: [organizationId], references: [id], onDelete: Cascade)
  location          Location[]          @relation("BusinessToLocation")
  items             MasterItem[]
  supplier          MasterSupplier[]
  company           CompanyDetails[]
  principal         Principal[]
  refBrand          RefBrand[]
  refSupplierClass  RefSupplierClass[]
  refSupplierGroup  RefSupplierGroup[]
  refDivision       RefDivision[]
  refFamily         RefFamily[]
  refGenericType    RefGenericType[]
  refUOM            RefUOM[]
  refBank           RefBank[]
  refCardType       RefCardType[]
  refShippingMethod RefShippingMethod[]
  refCategory       RefCategory[]
  refPayment        RefPayment[]
  refDiscount       RefDiscount[]
  refTerms          RefTerms[]

  @@index([organizationId])
  @@map("Business")
}

model Location {
  id             String      @unique @db.NVarChar(50)
  code           String      @unique @db.NVarChar(30)
  name           String      @db.NVarChar(100)
  isActive       Boolean
  businessId     String      @db.NVarChar(50)
  organizationId String      @db.NVarChar(50)
  createdAt      DateTime    @db.DateTime
  updatedAt      DateTime    @db.DateTime
  bgLocationCode String      @unique @default("") @db.NVarChar(30)
  inventory      Inventory[]
  business       Business    @relation("BusinessToLocation", fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([organizationId])
  @@map("Location")
}

model RegistrationStatus {
  id           String         @id(map: "PK_RegistrationStatus") @unique @default(uuid()) @db.NVarChar(30)
  code         String         @unique @db.NVarChar(30)
  name         String         @db.NVarChar(100)
  isActive     Boolean
  registration Registration[] @relation("RegStatusToRegList")

  @@map("RegistrationStatus")
}

model Registration {
  locationCode String             @db.NVarChar(30)
  cpuId        String             @db.NVarChar(100)
  macAddress   String             @db.NVarChar(100)
  mbSerial     String             @db.NVarChar(100)
  hddSerial    String             @db.NVarChar(100)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
  statusId     String             @default("whitelisted") @db.NVarChar(30)
  status       RegistrationStatus @relation("RegStatusToRegList", fields: [statusId], references: [id], onDelete: Cascade)

  @@unique([locationCode, cpuId, macAddress, mbSerial, hddSerial], map: "IDX_Registration")
  @@map("Registration")
}

model Inventory {
  locationCode String     @db.NVarChar(30)
  itemCode     String     @db.NVarChar(50)
  qty          Decimal    @db.Decimal(18, 2)
  cost         Decimal    @db.Decimal(18, 2)
  price        Decimal    @db.Decimal(18, 2)
  location     Location   @relation(fields: [locationCode], references: [bgLocationCode], onUpdate: NoAction, map: "FK_Inventory_Location")
  item         MasterItem @relation(fields: [itemCode], references: [itemCode], onDelete: Cascade, onUpdate: NoAction, map: "FK_Inventory_MasterItem")

  @@unique([locationCode, itemCode])
  @@map("Inventory")
}

model MasterItem {
  businessCode String      @db.NVarChar(30)
  itemCode     String      @unique(map: "IDX_MasterItem") @db.NVarChar(50)
  code         String      @db.NVarChar(50)
  name         String      @db.NVarChar(200)
  brand        String?     @db.NVarChar(50)
  category     String?     @db.NVarChar(50)
  generic      String?     @db.NVarChar(50)
  uom          String?     @db.NVarChar(50)
  cost         Decimal?    @db.Decimal(18, 2)
  price        Decimal?    @db.Decimal(18, 2)
  inventory    Inventory[]
  business     Business    @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_MasterItem_Business")

  @@map("MasterItem")
}

model MasterSupplier {
  businessCode String   @db.NVarChar(30)
  id_no        String   @unique(map: "IDX_MasterSupplier") @db.NVarChar(50)
  ref_cd       String   @db.NVarChar(30)
  ref_nm       String   @db.NVarChar(100)
  active_yn    Boolean  @db.Bit()
  default_yn   Boolean? @db.Bit()
  groupid_no   Int?
  classid_no   Int?
  trade_nm     String?  @db.NVarChar(50)
  tin_nb       String?  @db.NVarChar(20)
  address_tx   String?  @db.NVarChar(MAX)
  address2_tx  String?  @db.NVarChar(MAX)
  province_nm  String?  @db.NVarChar(100)
  city_nm      String?  @db.NVarChar(100)
  postal_nb    String?  @db.NVarChar(5)
  contact_nm   String?  @db.NVarChar(100)
  position_nm  String?  @db.NVarChar(100)
  tel1_nb      String?  @db.NVarChar(30)
  tel2_nb      String?  @db.NVarChar(30)
  mobile1_nb   String?  @db.NVarChar(30)
  mobile2_nb   String?  @db.NVarChar(30)
  email_ad     String?  @db.NVarChar(100)
  website_tx   String?  @db.NVarChar(100)
  priceid_no   Int?
  discid_no    Int?
  tax_yn       Boolean? @db.Bit()
  taxid_no     Int?
  termsid_no   Int?
  paymentid_no Int?
  limit_am     Decimal  @db.Decimal(18, 0)
  locid_no     Int?
  shipid_no    Int?
  leadtime_no  Int?
  create_dt    String?  @db.NVarChar(30)
  create_nm    String?  @db.NVarChar(30)
  modi_dt      String?  @db.NVarChar(30)
  modi_nm      String?  @db.NVarChar(30)
  whlocid_no   Int?
  glacctid_no  Int?
  bankid_no    Int?
  business     Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_MasterSupplier_Business")

  @@map("MasterSupplier")
}

model CompanyDetails {
  businessCode String   @db.NVarChar(30)
  id_no        String   @unique(map: "IDX_CompanyDetails") @db.NVarChar(50)
  ref_cd       String   @db.NVarChar(30)
  ref_nm       String?  @db.NVarChar(100)
  address_tx   String?  @db.NVarChar(MAX)
  address2_tx  String?  @db.NVarChar(MAX)
  city_nm      String?  @db.NVarChar(100)
  province_nm  String?  @db.NVarChar(100)
  postal_nb    String?  @db.NVarChar(5)
  contact_nm   String?  @db.NVarChar(100)
  position_nm  String?  @db.NVarChar(100)
  tel1_nb      String?  @db.NVarChar(20)
  tel2_nb      String?  @db.NVarChar(20)
  mobile1_nb   String?  @db.NVarChar(20)
  mobile2_nb   String?  @db.NVarChar(20)
  email_ad     String?  @db.NVarChar(100)
  website_tx   String?  @db.NVarChar(100)
  taxliable_yn Boolean? @db.Bit()
  taxid_no     Int?
  trade_nm     String?  @db.NVarChar(100)
  operator_nm  String?  @db.NVarChar(100)
  acc_nb       String?  @db.NVarChar(30)
  tin_nb       String?  @db.NVarChar(30)
  logo_im      String?  @db.NVarChar(MAX)
  create_dt    String?  @db.NVarChar(30)
  create_nm    String?  @db.NVarChar(30)
  modi_dt      String?  @db.NVarChar(30)
  modi_nm      String?  @db.NVarChar(30)
  oasis_cd     String?  @db.NVarChar(50)
  business     Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_CompanyDetails_Business")

  @@map("CompanyDetails")
}

model Principal {
  businessCode String   @db.NVarChar(30)
  id_no        String   @unique(map: "IDX_Principal") @db.NVarChar(50)
  ref_cd       String   @db.NVarChar(100)
  ref_nm       String?  @db.NVarChar(100)
  default_yn   Boolean  @db.Bit()
  create_nm    String?  @db.NVarChar(30)
  modi_dt      String?  @db.NVarChar(30)
  modi_nm      String?  @db.NVarChar(30)
  business     Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_Principal_Business")

  @@map("Principal")
}

model SalesDetails {
  locationCode String   @db.NVarChar(30)
  tranDate     DateTime @db.Date
  tranCode     String   @db.NVarChar(20)
  cashierCode  String   @db.NVarChar(50)
  itemCode     String   @db.NVarChar(50)
  qty          Decimal  @db.Decimal(18, 2)
  total        Decimal  @db.Decimal(18, 2)

  @@unique([locationCode, tranDate, tranCode, cashierCode, itemCode], map: "IDX_SalesDetails")
  @@unique([locationCode, tranDate, tranCode, cashierCode, itemCode], map: "UQ_SalesDetails")
  @@map("SalesDetails")
}

model ModTransferHeader {
  businessCode   String            @db.NVarChar(50)
  tran_ty        Int               @db.TinyInt
  flocid_no      Int
  tlocid_no      Int?
  direct_yn      Boolean?
  transitid_no   Int?
  statid_no      Int?
  doc_nb         String            @db.NVarChar(20)
  doc_dt         DateTime?         @db.SmallDateTime
  post_dt        DateTime?         @db.SmallDateTime
  userid_no      Int?
  pi_nm          String?           @db.NVarChar(50)
  ship_dt        DateTime?         @db.SmallDateTime
  shipid_no      Int?
  shipagentid_no Int?
  receipt_dt     DateTime?         @db.Date
  locid_no       Int?
  contact_nm     String?           @db.NVarChar(50)
  phone_nb       String?           @db.NVarChar(20)
  mobile_nb      String?           @db.NVarChar(20)
  approverid_no  Int?
  approvalid_no  Int?
  createid_no    Int?
  postid_no      Int?
  actid_no       Int?
  link_nb        String?           @db.NVarChar(50)
  produce_yn     Boolean?
  audit_yn       Boolean?
  audit_dt       DateTime?         @db.SmallDateTime
  year_tx        String?           @db.NVarChar(4)
  ystatid_no     Int?
  brtran_ty      Int?
  remarks_tx     String?           @db.NVarChar(200)
  sttrantyid_no  Int?
  refid_no       Int?
  isGet          Boolean           @default(false)
  details        ModStockDetails[] @relation("transfer")

  @@unique([businessCode, doc_nb], map: "uq_InventoryTransferHeader")
  @@map("ModTransferHeader")
}

model ModStockDetails {
  businessCode  String            @db.NVarChar(50)
  doc_nb        String            @db.NVarChar(20)
  typeid_no     Int?
  itemid_no     Int
  item_cd       String?           @db.NVarChar(30)
  item_nm       String?           @db.NVarChar(200)
  locid_no      Int
  qty_am        Decimal           @db.Decimal(18, 2)
  uomid_no      Int?
  cost_am       Decimal           @db.Decimal(18, 4)
  tcost_am      Decimal           @db.Decimal(18, 4)
  tax_yn        Boolean?
  taxid_no      Int?
  tax_am        Decimal?          @db.Decimal(18, 4)
  disc_rt       Decimal?          @db.Decimal(18, 4)
  disc_am       Decimal?          @db.Decimal(18, 4)
  tran_am       Decimal?          @db.Decimal(18, 4)
  qtypost_am    Decimal           @db.Decimal(18, 2)
  lot_yn        Boolean
  count_am      Decimal?          @db.Decimal(18, 2)
  sourceid_no   Int
  qtyprod_am    Decimal?          @db.Decimal(18, 2)
  line_no       Int?
  beginv_am     Decimal?          @db.Decimal(18, 2)
  in_am         Decimal?          @db.Decimal(18, 2)
  out_am        Decimal?          @db.Decimal(18, 2)
  transfer_am   Decimal?          @db.Decimal(18, 2)
  sold_am       Decimal?          @db.Decimal(18, 2)
  production_am Decimal?          @db.Decimal(18, 2)
  remarks_tx    String?           @db.NVarChar(200)
  update_yn     Boolean?
  recvdt_tx     String?           @db.NVarChar(100)
  invdt_tx      String?           @db.NVarChar(100)
  inv_nb        String?           @db.NVarChar(100)
  posting       ModPosting[]      @relation("details_posting")
  header        ModTransferHeader @relation("transfer", fields: [businessCode, doc_nb], references: [businessCode, doc_nb], onDelete: Cascade)

  @@unique([businessCode, doc_nb, locid_no, itemid_no], map: "uq_InventoryStockDetails")
  @@map("ModStockDetails")
}

model ModPosting {
  businessCode String          @db.NVarChar(50)
  line_no      Int
  tran_ty      Int             @db.TinyInt
  module_nm    String          @db.NVarChar(50)
  source_nb    String          @db.NVarChar(20)
  post_nb      String?         @db.NVarChar(20)
  locid_no     Int
  itemid_no    Int
  qty_am       Decimal         @db.Decimal(18, 2)
  brrecvd_am   Decimal?        @db.Decimal(18, 2)
  uomid_no     Int?
  serial_nb    String          @db.NVarChar(20)
  batch_nb     String          @db.NVarChar(20)
  lot_nb       String          @db.NVarChar(20)
  exp_dt       DateTime        @db.Date
  postedid_no  Int
  tran_dt      DateTime?       @db.SmallDateTime
  userid_no    Int?
  count_am     Decimal?        @db.Decimal(18, 2)
  variance_am  Decimal?        @db.Decimal(18, 2)
  child_yn     Boolean?
  year_tx      String?         @db.NVarChar(4)
  recvdt_tx    String?         @db.NVarChar(100)
  invdt_tx     String?         @db.NVarChar(100)
  inv_nb       String?         @db.NVarChar(100)
  details      ModStockDetails @relation("details_posting", fields: [businessCode, source_nb, locid_no, itemid_no], references: [businessCode, doc_nb, locid_no, itemid_no])

  @@unique([businessCode, source_nb, locid_no, itemid_no, serial_nb, batch_nb, lot_nb, exp_dt], map: "uq_ModPosting")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B614F412E55") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

// REFERENCIAL 2 COLUMNS
model RefBrand {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefBrand_Business")

  @@unique([businessCode, code])
  @@map("RefBrand")
}

model RefDivision {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefDivision_Business")

  @@unique([businessCode, code])
  @@map("RefDivision")
}

model RefFamily {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefFamily_Business")

  @@unique([businessCode, code])
  @@map("RefFamily")
}

model RefGenericType {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefGenericType_Business")

  @@unique([businessCode, code])
  @@map("RefGenericType")
}

model RefUOM {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefUOM_Business")

  @@unique([businessCode, code])
  @@map("RefUOM")
}

model RefSupplierClass {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefSupplierClass_Business")

  @@unique([businessCode, code])
  @@map("RefSupplierClass")
}

model RefSupplierGroup {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefSupplierGroup_Business")

  @@unique([businessCode, code])
  @@map("RefSupplierGroup")
}

model RefBank {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefBank_Business")

  @@unique([businessCode, code])
  @@map("RefBank")
}

model RefCardType {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefCardType_Business")

  @@unique([businessCode, code])
  @@map("RefCardType")
}

model RefShippingMethod {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefShippingMethod_Business")

  @@unique([businessCode, code])
  @@map("RefShippingMethod")
}

// REFERENCIAL MULTI COLUMNS
model RefCategory {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  colorCode String? @db.NVarChar(50)

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefCategory_Business")

  @@unique([businessCode, code])
  @@map("RefCategory")
}

model RefPayment {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  operator Int?     @default(0) @db.TinyInt()
  hide     Boolean? @default(false) @db.Bit()

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefPayment_Business")

  @@unique([businessCode, code])
  @@map("RefPayment")
}

model RefDiscount {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  discRate Int?     @default(0) @db.TinyInt()
  lessTax  Boolean? @default(false) @db.Bit()
  senior   Boolean? @default(false) @db.Bit()

  promo Boolean? @default(false) @db.Bit()
  claim Boolean? @default(false) @db.Bit()
  hide  Boolean? @default(false) @db.Bit()

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefDiscount_Business")

  @@unique([businessCode, code])
  @@map("RefDiscount")
}

model RefTerms {
  businessCode String   @db.NVarChar(30)
  id           String   @id() @default(uuid())
  code         String   @unique @db.NVarChar(30)
  name         String   @db.NVarChar(50)
  default      Boolean  @db.Bit()
  active       Boolean  @default(true) @db.Bit()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  days Int? @default(0) @db.TinyInt()

  business Business @relation(fields: [businessCode], references: [bgBusinessCode], onUpdate: NoAction, map: "FK_RefTerms_Business")

  @@unique([businessCode, code])
  @@map("RefTerms")
}
